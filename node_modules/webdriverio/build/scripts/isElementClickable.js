"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isElementClickable;

function isElementClickable(elem) {
  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !document.elementFromPoint) {
    return false;
  }

  function getOverlappingElement(elem) {
    const elemDimension = elem.getBoundingClientRect();
    const x = elemDimension.left + elem.clientWidth / 2;
    const y = elemDimension.top + elem.clientHeight / 2;
    return document.elementFromPoint(x, y);
  }

  function isElementInViewport(elem) {
    if (!elem.getBoundingClientRect) {
      return false;
    }

    const rect = elem.getBoundingClientRect();
    const windowHeight = window.innerHeight || document.documentElement.clientHeight;
    const windowWidth = window.innerWidth || document.documentElement.clientWidth;
    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;
    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;
    return vertInView && horInView;
  }

  function isClickable(elem) {
    const elementFromPoint = getOverlappingElement(elem);
    return isElementInViewport(elem) && elem.disabled !== true && (elementFromPoint === elem || elem.contains(elementFromPoint));
  }

  if (!isClickable(elem)) {
    elem.scrollIntoView({
      block: 'nearest',
      inline: 'nearest'
    });

    if (!isClickable(elem)) {
      elem.scrollIntoView({
        block: 'center',
        inline: 'center'
      });
      return isClickable(elem);
    }
  }

  return true;
}